#!/usr/bin/env ruby
# frozen_string_literal: true

require 'filemagic'
require 'namespacer'
require 'optparse'
require 'pathname'
require 'tty-command'
module Rubyists
  # Namespace for the namespacer CLI
  module Namespacer
    CLI_OPTS = %i[recursive verbose in_place fail_rubocop_silently allow_text_files dry_run].freeze
    CliOptions = Struct.new(*CLI_OPTS)
    def self.cli_options
      @cli_options ||= CliOptions.new(verbose: false, recursive: false, in_place: false)
    end

    def self.cmd
      @cmd ||= TTY::Command.new printer: :null
    end

    def self.magic
      @magic ||= FileMagic.new(FileMagic::MAGIC_MIME)
    end
  end
end

options = Rubyists::Namespacer.cli_options

parser = OptionParser.new do |opts|
  opts.banner = 'Usage: namespacer [options] NAMESPACE PATHS'

  opts.on('-r', '--recursive', 'Recursively namespace all files in PATH') { |_| options.recursive = true }

  opts.on('-i', '--in-place', 'Modify files in-place') { |_| options.in_place = true }

  opts.on('-d', '--dry-run', 'Dry run, do not write files') { |_| options.dry_run = true }

  opts.on('-a', '--allow-text-files', 'Allow non-ruby mime types, so long as they are text') do |_|
    options.allow_text_files = true
  end

  opts.on('-f', '--fail-rubocop-silently', 'Write files even if they are not rubocop-friendly') do |_|
    options.fail_rubocop_silently = true
  end

  opts.on('-V', '--version', 'Print version') do
    puts "namespacer #{Rubyists::Namespacer::VERSION}"
    exit
  end

  opts.on('-v', '--verbose', 'Verbose output') do
    options.verbose = true
  end
end
parser.parse!

namespace, paths = ARGV

if namespace.nil?
  warn 'No namespace supplied'
  warn parser
  exit 1
end

if paths.nil?
  warn 'No paths supplied'
  warn parser
  exit 2
end
paths = Array(paths) unless paths.is_a?(Array)

paths.map! do |path|
  p = Pathname(path)
  unless p.exist?
    warn "Path #{p} does not exist"
    exit 3
  end
  unless options.recursive || p.file?
    warn "Path #{p} is not a file (use -r to recursively namespace files)"
    exit 4
  end
  p
end

def new_path(path)
  dir = path.dirname
  ext = path.extname
  base = path.basename(ext.to_s)
  dir.join("#{base}_namespaced#{ext}")
end

def rubocop_cmd(path, ruby_code) # rubocop:disable Metrics/MethodLength
  result = Rubyists::Namespacer.cmd.run!(:rubocop,
                                         '-A',
                                         '--stdin',
                                         path.basename.to_s,
                                         '--stderr',
                                         input: ruby_code,
                                         only_output_on_error: true)
  if result.failure?
    warn "Rubocop failed for #{path}:\n#{result.err}"
    if Rubyists::Namespacer.cli_options.fail_rubocop_silently
      warn 'Continuing anyway'
    else
      exit 6
    end
  end

  result
end

def rubocop_friendly?(path)
  opts = Rubyists::Namespacer.cli_options
  magic = Rubyists::Namespacer.magic
  mime = magic.file(path.to_s)
  return true if mime.include?('text/x-ruby')
  return true if mime.split('/').first == 'text' && opts.allow_text_files

  warn "File #{path} is not a Ruby file (#{mime}), consider -a" if opts.verbose
  false
end

def log_namespace(namespace, write_path)
  opts = Rubyists::Namespacer.cli_options
  return unless opts.verbose

  msg = "Namespacing #{write_path} with #{namespace}"
  msg << ' (in-place)' if opts.in_place
  warn msg
end

def valid_file?(path)
  !excluded_path?(path) && rubocop_friendly?(path)
end

def namespace_file(namespace, path)
  return unless valid_file?(path)

  opts = Rubyists::Namespacer.cli_options
  namespaced = Rubyists::Namespacer.namespace!(path.read, namespace)
  write_path = opts.in_place ? path : new_path(path)
  log_namespace namespace, write_path
  cmd = rubocop_cmd(write_path, namespaced)
  warn "Writing namespaced file to #{write_path}" if opts.verbose
  write_path.write(cmd.out)
end

def excluded_path?(path)
  return true if path.directory?
  return true if path.basename.to_s.start_with?('.')
  return true if path.basename.to_s.end_with?('_namespaced')
  return true if path.basename.to_s.match?(/_namespaced\.[^\.]+$/)

  false
end

paths.each do |path|
  case path
  when ->(p) { p.directory? }
    if options.recursive
      path.find do |f|
        namespace_file(namespace, f)
      end
    else
      warn "Path #{path} is a directory, use -r to recursively namespace files"
      exit 5
    end
  when ->(p) { p.file? }
    namespace_file(namespace, path)
  else
    raise 'Invalid path'
  end
end
